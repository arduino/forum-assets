# See: https://taskfile.dev/#/usage
version: "3"

tasks:
  check:
    desc: Check for problems with the project
    deps:
      - task: ci:validate
      - task: general:check-filenames
      - task: general:check-formatting
      - task: general:check-spelling
      - task: general:check-symlinks
      - task: markdown:check-links
      - task: markdown:lint
      - task: yaml:lint

  fix:
    desc: Make automated corrections to the project's files
    deps:
      - task: general:correct-spelling
      - task: general:format-prettier
      - task: markdown:fix

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-workflows-task/Taskfile.yml
  ci:validate:
    desc: Validate GitHub Actions workflows against their JSON schema
    vars:
      # Source: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/github-workflow.json
      WORKFLOW_SCHEMA_URL: https://json.schemastore.org/github-workflow
      WORKFLOW_SCHEMA_PATH:
        sh: task utility:mktemp-file TEMPLATE="workflow-schema-XXXXXXXXXX.json"
      WORKFLOWS_DATA_PATH: "./.github/workflows/*.{yml,yaml}"
    deps:
      - task: npm:install-deps
    cmds:
      - |
        wget \
          --quiet \
          --output-document="{{.WORKFLOW_SCHEMA_PATH}}" \
          {{.WORKFLOW_SCHEMA_URL}}
      - |
        npx \
          --package=ajv-cli \
          --package=ajv-formats \
          ajv validate \
            --all-errors \
            --strict=false \
            -c ajv-formats \
            -s "{{.WORKFLOW_SCHEMA_PATH}}" \
            -d "{{.WORKFLOWS_DATA_PATH}}"

  docs:generate:
    desc: Create all generated documentation content
    # This is an "umbrella" task used to call any documentation generation processes the project has.
    # It can be left empty if there are none.

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-files-task/Taskfile.yml
  general:check-filenames:
    desc: Check for non-portable filenames
    cmds:
      - |
        find . \
          -type d -name '.git' -prune -o \
          -type d -name '.licenses' -prune -o \
          -type d -name '__pycache__' -prune -o \
          -type d -name 'node_modules' -prune -o \
          -exec \
            sh \
              -c \
                ' \
                  basename "$0" | \
                    grep \
                      --perl-regexp \
                      --regexp='"'"'([<>:"/\\|?*\x{0000}-\x{001F}])|(.+\.$)'"'"' \
                      --silent \
                  && \
                  echo "$0"
                ' \
              '{}' \
            \; \
          -execdir \
            false \
            '{}' \
            + \
        || \
        {
          echo
          echo "Prohibited characters found in filenames"
          echo "See:"
          echo "https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file#naming-conventions:~:text=except%20for%20the%20following"
          false
        }
      - |
        find . \
          -type d -name '.git' -prune -o \
          -type d -name '.licenses' -prune -o \
          -type d -name '__pycache__' -prune -o \
          -type d -name 'node_modules' -prune -o \
          -exec \
            sh \
              -c \
                ' \
                  basename "$0" | \
                    grep \
                      --ignore-case \
                      --extended-regexp \
                      --regexp='"'"'^(con|prn|aux|nul|com[0-9]+|lpt[0-9]+)$'"'"' \
                      --silent \
                  && \
                  echo "$0"
                ' \
              '{}' \
            \; \
          -execdir \
            false \
            '{}' \
            + \
        || \
        {
          echo
          echo "Reserved filenames found"
          echo "See:"
          echo "https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file#naming-conventions:~:text=use%20the%20following-,reserved%20names,-for%20the%20name"
          false
        }

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-general-formatting-task/Taskfile.yml
  general:check-formatting:
    desc: Check basic formatting style of all files
    cmds:
      - |
        if ! which ec &>/dev/null; then
          echo "ec not found or not in PATH."
          echo "Please install: https://github.com/editorconfig-checker/editorconfig-checker#installation"
          exit 1
        fi
      - ec

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/spell-check-task/Taskfile.yml
  general:check-spelling:
    desc: Check for commonly misspelled words
    deps:
      - task: poetry:install-deps
    cmds:
      - poetry run codespell

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-files-task/Taskfile.yml
  general:check-symlinks:
    desc: Check for bad symlinks
    cmds:
      - |
        find . \
          -type d -name '.git' -prune -o \
          -type d -name '.licenses' -prune -o \
          -type d -name '__pycache__' -prune -o \
          -type d -name 'node_modules' -prune -o \
          -type l \
          -execdir \
            test ! -e '{}' \
            \; \
          -exec \
            echo '{}' \
            \; \
          -execdir \
            false \
            '{}' \
            + \
        || \
        {
          echo 'Broken or circular symlink found'
          false
        }

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/spell-check-task/Taskfile.yml
  general:correct-spelling:
    desc: Correct commonly misspelled words where possible
    deps:
      - task: poetry:install-deps
    cmds:
      - poetry run codespell --write-changes

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-prettier-formatting-task/Taskfile.yml
  general:format-prettier:
    desc: Format all supported files with Prettier
    deps:
      - task: npm:install-deps
    cmds:
      - npx prettier --write .

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-markdown-task/Taskfile.yml
  markdown:check-links:
    desc: Check for broken links
    deps:
      - task: docs:generate
      - task: npm:install-deps
    cmds:
      - |
        if [[ "{{.OS}}" == "Windows_NT" ]]; then
          # npx --call uses the native shell, which makes it too difficult to use npx for this application on Windows,
          # so the Windows user is required to have markdown-link-check installed and in PATH.
          if ! which markdown-link-check &>/dev/null; then
            echo "markdown-link-check not found or not in PATH."
            echo "Please install: https://github.com/tcort/markdown-link-check#readme"
            exit 1
          fi
          # Default behavior of the task on Windows is to exit the task when the first broken link causes a non-zero
          # exit status, but it's better to check all links before exiting.
          set +o errexit
          STATUS=0
          # Using -regex instead of -name to avoid Task's behavior of globbing even when quoted on Windows
          # The odd method for escaping . in the regex is required for windows compatibility because mvdan.cc/sh gives
          # \ characters special treatment on Windows in an attempt to support them as path separators.
          for file in $(
            find . \
              -type d -name '.git' -prune -o \
              -type d -name '.licenses' -prune -o \
              -type d -name '__pycache__' -prune -o \
              -type d -name 'node_modules' -prune -o \
              -regex ".*[.]md" -print
          ); do
            markdown-link-check \
              --quiet \
              --config "./.markdown-link-check.json" \
              "$file"
            STATUS=$(( $STATUS + $? ))
          done
          exit $STATUS
        else
          npx --package=markdown-link-check --call='
            STATUS=0
            for file in $(
              find . \
                -type d -name '.git' -prune -o \
                -type d -name '.licenses' -prune -o \
                -type d -name '__pycache__' -prune -o \
                -type d -name 'node_modules' -prune -o \
                -regex ".*[.]md" -print
            ); do
              markdown-link-check \
                --quiet \
                --config "./.markdown-link-check.json" \
                "$file"
              STATUS=$(( $STATUS + $? ))
            done
            exit $STATUS
          '
        fi

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-markdown-task/Taskfile.yml
  markdown:fix:
    desc: Automatically correct linting violations in Markdown files where possible
    deps:
      - task: npm:install-deps
    cmds:
      - npx markdownlint-cli --fix "**/*.md"

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-markdown-task/Taskfile.yml
  markdown:lint:
    desc: Check for problems in Markdown files
    deps:
      - task: npm:install-deps
    cmds:
      - npx markdownlint-cli "**/*.md"

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-toc-task/Taskfile.yml
  markdown:toc:
    desc: Update the table of contents
    deps:
      - task: npm:install-deps
    cmds:
      - |
        npx markdown-toc \
            --bullets=- \
            --maxdepth={{.MAX_DEPTH}} \
            -i \
            "{{.FILE_PATH}}"

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/npm-task/Taskfile.yml
  npm:install-deps:
    desc: Install dependencies managed by npm
    cmds:
      - npm install

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/poetry-task/Taskfile.yml
  poetry:install-deps:
    desc: Install dependencies managed by Poetry
    cmds:
      - poetry install --no-root

  # Make a temporary file named according to the passed TEMPLATE variable and print the path passed to stdout
  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/windows-task/Taskfile.yml
  utility:mktemp-file:
    vars:
      RAW_PATH:
        sh: mktemp --tmpdir "{{.TEMPLATE}}"
    cmds:
      - task: utility:normalize-path
        vars:
          RAW_PATH: "{{.RAW_PATH}}"

  # Make a temporary folder named according to the passed TEMPLATE variable and print the path passed to stdout
  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/windows-task/Taskfile.yml
  utility:mktemp-folder:
    vars:
      RAW_PATH:
        sh: mktemp --directory --tmpdir "{{.TEMPLATE}}"
    cmds:
      - task: utility:normalize-path
        vars:
          RAW_PATH: "{{.RAW_PATH}}"

  # Print a normalized version of the path passed via the RAW_PATH variable to stdout
  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/windows-task/Taskfile.yml
  utility:normalize-path:
    cmds:
      - |
        if [[ "{{.OS}}" == "Windows_NT" ]] && which cygpath &>/dev/null; then
            # Even though the shell handles POSIX format absolute paths as expected, external applications do not.
            # So paths passed to such applications must first be converted to Windows format.
            cygpath -w "{{.RAW_PATH}}"
        else
          echo "{{.RAW_PATH}}"
        fi

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-yaml-task/Taskfile.yml
  yaml:lint:
    desc: Check for problems with YAML files
    deps:
      - task: poetry:install-deps
    cmds:
      - poetry run yamllint --format {{default "colored" .YAMLLINT_FORMAT}} .
